     1 00000000                                 ; naskfunc ; TAB=4
     2 00000000                                 
     3 00000000                                 [FORMAT "WCOFF"]				; Mode for creating object files
     4 00000000                                 [INSTRSET "i486p"]				; Description that uses up to 486 instructions
     5 00000000                                 [BITS 32]						; Specify machine language for 32-bit mode
     6 00000000                                 [FILE "naskfunc.nas"]			; Source file name
     7 00000000                                 
     8 00000000                                 		GLOBAL _io_hlt, _io_cli, _io_sti, _io_stihlt
     9 00000000                                 		GLOBAL _io_in8,  _io_in16,  _io_in32
    10 00000000                                 		GLOBAL _io_out8, _io_out16, _io_out32
    11 00000000                                 		GLOBAL _io_load_eflags, _io_store_eflags
    12 00000000                                 		GLOBAL _load_gdtr, _load_idtr
    13 00000000                                 		GLOBAL _asm_inthandler21, _asm_inthandler27, _asm_inthandler2c
    14 00000000                                 		EXTERN _inthandler21, _inthandler27, _inthandler2c 
    15 00000000                                 
    16                                          [SECTION .text]		; This line needs for object files
    17 00000000                                 
    18 00000000                                 _io_hlt:	; void io_hlt(void);
    19 00000000 F4                              		HLT
    20 00000001 C3                              		RET
    21 00000002                                 
    22 00000002                                 _io_cli:	; void io_cli(void);
    23 00000002 FA                              		CLI
    24 00000003 C3                              		RET
    25 00000004                                 
    26 00000004                                 _io_sti:	; void io_sti(void);
    27 00000004 FB                              		STI
    28 00000005 C3                              		RET
    29 00000006                                 
    30 00000006                                 _io_stihlt:	; void io_stihlt(void);
    31 00000006 FB                              		STI
    32 00000007 F4                              		HLT
    33 00000008 C3                              		RET
    34 00000009                                 
    35 00000009                                 _io_in8:	; int io_in8(int port);
    36 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    37 0000000D B8 00000000                     		MOV		EAX,0
    38 00000012 EC                              		IN		AL,DX
    39 00000013 C3                              		RET
    40 00000014                                 
    41 00000014                                 _io_in16:	; int io_in16(int port);
    42 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    43 00000018 B8 00000000                     		MOV		EAX,0
    44 0000001D 66 ED                           		IN		AX,DX
    45 0000001F C3                              		RET
    46 00000020                                 
    47 00000020                                 _io_in32:	; int io_in32(int port);
    48 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    49 00000024 ED                              		IN		EAX,DX
    50 00000025 C3                              		RET
    51 00000026                                 
    52 00000026                                 _io_out8:	; void io_out8(int port, int data);
    53 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    54 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    55 0000002E EE                              		OUT		DX,AL
    56 0000002F C3                              		RET
    57 00000030                                 
    58 00000030                                 _io_out16:	; void io_out16(int port, int data);
    59 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    60 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    61 00000038 66 EF                           		OUT		DX,AX
    62 0000003A C3                              		RET
    63 0000003B                                 
    64 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    65 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    66 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    67 00000043 EF                              		OUT		DX,EAX
    68 00000044 C3                              		RET
    69 00000045                                 
    70 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    71 00000045 9C                              		PUSHFD		; It means PUSH EFLAGS
    72 00000046 58                              		POP		EAX
    73 00000047 C3                              		RET
    74 00000048                                 
    75 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    76 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    77 0000004C 50                              		PUSH	EAX
    78 0000004D 9D                              		POPFD		; It means POP EFLAGS
    79 0000004E C3                              		RET
    80 0000004F                                 
    81 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    82 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    83 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    84 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    85 0000005E C3                              		RET
    86 0000005F                                 
    87 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
    88 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    89 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
    90 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
    91 0000006E C3                              		RET
    92 0000006F                                 
    93 0000006F                                 _asm_inthandler21:
    94 0000006F 06                              		PUSH	ES
    95 00000070 1E                              		PUSH	DS
    96 00000071 60                              		PUSHAD
    97 00000072 89 E0                           		MOV		EAX,ESP
    98 00000074 50                              		PUSH	EAX
    99 00000075 66 8C D0                        		MOV		AX,SS
   100 00000078 8E D8                           		MOV		DS,AX
   101 0000007A 8E C0                           		MOV		ES,AX
   102 0000007C E8 [00000000]                   		CALL	_inthandler21
   103 00000081 58                              		POP		EAX
   104 00000082 61                              		POPAD
   105 00000083 1F                              		POP		DS
   106 00000084 07                              		POP		ES
   107 00000085 CF                              		IRETD
   108 00000086                                 
   109 00000086                                 _asm_inthandler27:
   110 00000086 06                              		PUSH	ES
   111 00000087 1E                              		PUSH	DS
   112 00000088 60                              		PUSHAD
   113 00000089 89 E0                           		MOV		EAX,ESP
   114 0000008B 50                              		PUSH	EAX
   115 0000008C 66 8C D0                        		MOV		AX,SS
   116 0000008F 8E D8                           		MOV		DS,AX
   117 00000091 8E C0                           		MOV		ES,AX
   118 00000093 E8 [00000000]                   		CALL	_inthandler27
   119 00000098 58                              		POP		EAX
   120 00000099 61                              		POPAD
   121 0000009A 1F                              		POP		DS
   122 0000009B 07                              		POP		ES
   123 0000009C CF                              		IRETD
   124 0000009D                                 
   125 0000009D                                 _asm_inthandler2c:
   126 0000009D 06                              		PUSH	ES
   127 0000009E 1E                              		PUSH	DS
   128 0000009F 60                              		PUSHAD
   129 000000A0 89 E0                           		MOV		EAX,ESP
   130 000000A2 50                              		PUSH	EAX
   131 000000A3 66 8C D0                        		MOV		AX,SS
   132 000000A6 8E D8                           		MOV		DS,AX
   133 000000A8 8E C0                           		MOV		ES,AX
   134 000000AA E8 [00000000]                   		CALL	_inthandler2c
   135 000000AF 58                              		POP		EAX
   136 000000B0 61                              		POPAD
   137 000000B1 1F                              		POP		DS
   138 000000B2 07                              		POP		ES
   139 000000B3 CF                              		IRETD
