     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; Mode for creating object files
     5 00000000                                 [INSTRSET "i486p"]				; Description that uses up to 486 instructions
     6 00000000                                 [BITS 32]						; Specify machine language for 32-bit mode
     7 00000000                                 [FILE "naskfunc.nas"]			; Source file name
     8 00000000                                 
     9 00000000                                 		GLOBAL _io_hlt, _io_cli, _io_sti, _io_stihlt ; Declare function names
    10 00000000                                 		GLOBAL _io_in8,  _io_in16,  _io_in32
    11 00000000                                 		GLOBAL _io_out8, _io_out16, _io_out32
    12 00000000                                 		GLOBAL _io_load_eflags, _io_store_eflags
    13 00000000                                 		GLOBAL _load_gdtr, _load_idtr
    14 00000000                                 		GLOBAL _asm_inthandler21, _asm_inthandler27, _asm_inthandler2c
    15 00000000                                 		EXTERN _inthandler21, _inthandler27, _inthandler2c 
    16 00000000                                 
    17                                          [SECTION .text]		; This line needs for object files
    18 00000000                                 
    19 00000000                                 _io_hlt:	; void io_hlt(void);
    20 00000000 F4                              		HLT
    21 00000001 C3                              		RET
    22 00000002                                 
    23 00000002                                 _io_cli:	; void io_cli(void);
    24 00000002 FA                              		CLI
    25 00000003 C3                              		RET
    26 00000004                                 
    27 00000004                                 _io_sti:	; void io_sti(void);
    28 00000004 FB                              		STI
    29 00000005 C3                              		RET
    30 00000006                                 
    31 00000006                                 _io_stihlt:	; void io_stihlt(void);
    32 00000006 FB                              		STI
    33 00000007 F4                              		HLT
    34 00000008 C3                              		RET
    35 00000009                                 
    36 00000009                                 _io_in8:	; int io_in8(int port);
    37 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		;port
    38 0000000D B8 00000000                     		MOV		EAX,0
    39 00000012 EC                              		IN		AL,DX
    40 00000013 C3                              		RET
    41 00000014                                 
    42 00000014                                 _io_in16:	; int io_in16(int port);
    43 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		;port
    44 00000018 B8 00000000                     		MOV		EAX,0
    45 0000001D 66 ED                           		IN		AX,DX
    46 0000001F C3                              		RET
    47 00000020                                 
    48 00000020                                 _io_in32:	; int io_in32(int port);
    49 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		;port
    50 00000024 ED                              		IN		EAX,DX
    51 00000025 C3                              		RET
    52 00000026                                 
    53 00000026                                 _io_out8:	; void io_out8(int port, int data);
    54 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		;port
    55 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		;data
    56 0000002E EE                              		OUT		DX,AL
    57 0000002F C3                              		RET
    58 00000030                                 
    59 00000030                                 _io_out16:	; void io_out16(int port, int data);
    60 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		;port
    61 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		;data
    62 00000038 66 EF                           		OUT		DX,AX
    63 0000003A C3                              		RET
    64 0000003B                                 
    65 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    66 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		;port
    67 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		;data
    68 00000043 EF                              		OUT		DX,EAX
    69 00000044 C3                              		RET
    70 00000045                                 
    71 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    72 00000045 9C                              		PUSHFD		; It means PUSH EFLAGS
    73 00000046 58                              		POP		EAX
    74 00000047 C3                              		RET
    75 00000048                                 
    76 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    77 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    78 0000004C 50                              		PUSH	EAX
    79 0000004D 9D                              		POPFD		; It means POP EFLAGS
    80 0000004E C3                              		RET
    81 0000004F                                 
    82 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    83 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    84 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    85 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    86 0000005E C3                              		RET
    87 0000005F                                 
    88 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
    89 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    90 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
    91 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
    92 0000006E C3                              		RET
    93 0000006F                                 
    94 0000006F                                 _asm_inthandler21:
    95 0000006F 06                              		PUSH	ES
    96 00000070 1E                              		PUSH	DS
    97 00000071 60                              		PUSHAD
    98 00000072 89 E0                           		MOV		EAX,ESP
    99 00000074                                 		PUSH	EAX,
		MOV		AX,SS
      >> [ERROR #002] parameter error.
   100 00000074 8E D8                           		MOV		DS,AX
   101 00000076 8E C0                           		MOV		ES,AX
   102 00000078 E8 [00000000]                   		CALL	_inthandler21
   103 0000007D 58                              		POP		EAX
   104 0000007E 61                              		POPAD
   105 0000007F 1F                              		POP		DS
   106 00000080 07                              		POP		ES
   107 00000081 CF                              		IRETD
   108 00000082                                 
   109 00000082                                 _asm_inthandler27:
   110 00000082 06                              		PUSH	ES
   111 00000083 1E                              		PUSH	DS
   112 00000084 60                              		PUSHAD
   113 00000085 89 E0                           		MOV		EAX,ESP
   114 00000087                                 		PUSH	EAX,
		MOV		AX,SS
      >> [ERROR #002] parameter error.
   115 00000087 8E D8                           		MOV		DS,AX
   116 00000089 8E C0                           		MOV		ES,AX
   117 0000008B E8 [00000000]                   		CALL	_inthandler27
   118 00000090 58                              		POP		EAX
   119 00000091 61                              		POPAD
   120 00000092 1F                              		POP		DS
   121 00000093 07                              		POP		ES
   122 00000094 CF                              		IRETD
   123 00000095                                 
   124 00000095                                 _asm_inthandler2c:
   125 00000095 06                              		PUSH	ES
   126 00000096 1E                              		PUSH	DS
   127 00000097 60                              		PUSHAD
   128 00000098 89 E0                           		MOV		EAX,ESP
   129 0000009A                                 		PUSH	EAX,
		MOV		AX,SS
      >> [ERROR #002] parameter error.
   130 0000009A 8E D8                           		MOV		DS,AX
   131 0000009C 8E C0                           		MOV		ES,AX
   132 0000009E E8 [00000000]                   		CALL	_inthandler2c
   133 000000A3 58                              		POP		EAX
   134 000000A4 61                              		POPAD
   135 000000A5 1F                              		POP		DS
   136 000000A6 07                              		POP		ES
   137 000000A7 CF                              		IRETD
